;;*****************************************************************************
;;
;; Assembly language subroutine
;;
;; Author: Gary J. Minden
;; Organization: KU/EECS/EECS 388
;; Date: 2014-04-18
;; Version: 1.0
;;
;; Purpose: Assembly language subroutine
;;
;; Notes:
;;
;;*****************************************************************************
;;
;;
;; This subroutine computes a value based on four input arguments.
;; The arguments are assumed to be in CPU registers R0 - R3
;; (aka A1 - A4).
;; The result is returned in R0.
;;
;; Declare sections and external references

		.global AsmCompute ; Declare entry point as a global symbol

;; No constant data
;; No variable allocation
;; Program instructions

		.text ; Program section

AsmCompute: ; Entry point

;;
;; Save necessary registers
;;
;; Since this subroutine does not use registers other than R0 - R3,
;; and we do not call another subroutine, we don't need to save
;; any registers.
;;
;;
;; Allocate local variables on the Stack
;;
;; Since this subroutine does not have local variables,
;; no Stack space need be allocated.
;;
;;
;; For demonstration, this subroutine computes R0 + R1 + R2 + R3
;; and returns the result in R0.
;;
;; You should replace the following three instructions with the
;; the instructions necessary to carry out your assigned
;; algebraic assignment statements.
;;

	PUSH {R4,R5}

	LDR R4,[R0]
	LDR R5,[R2]

	MUL R4,R1
	MUL R5,R3

	ADDS R4,R5			; store X value in R4
						; no longer need value in R5
						; Equation no longer needs C
						; I can now use R2 as I please

	LDR R5,[R1]			; Load R5 with B (stored in R1)
	MOV R2,#1			; I will use R2 as my incrementer starting at value 1

	Start:
	CMP R0,R2		; Need to loop A (stored in R0) times
					; does R2 (my incrementer) == A yet?
	BGE Exit		; greater than or equal to? EXIT
	ADDS R2,R2,#1	; increment index
	ADDS R5,R5		; Add B (stored in R5) to itself
	B Start
					; B	ForTest		; Goto for-loop test
					; ForExit:
	Exit:
	ADDS R5,R3			; Y now stored in R5
						; X still stored in R4

	CMP	R4,R5
	BGE 	Y
	B		X

	Y: LDR R0,[R5]
	X: LDR R0,[R4]


;; Return from the subroutine with the result in R0
;;

		BX LR ; Branch to the program address in the Link Register
		.end
